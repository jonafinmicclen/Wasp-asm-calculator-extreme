// MAIN START

MOV AX, 0x000F
MOV BX, DIGIT1

CALL distributeintodigit

HALT

// MAIN END


// FUNCTIONS

// FUNCTION START
distributeintodigit:
// BX must contain address of address of target digit
// AX must contain value to distribute

MOV [TEMP3], BX
// TEMP 3 is ptr to digit ptr

CALL splitlast

CMP BX, 0x0A
JL compareAintodigit

INC AX
SUB BX, 0xA

compareAintodigit:

MOV [TEMP4], AX

MOV AX, [TEMP3]
MOV AX, [AX]
MOV [AX], BX

MOV AX, [TEMP4]

RET
// remainder is in AX
// distributeintodigit END



// FUNCTION START
hexmulitply:

CALL anbngenerator

MOV BX, [AN00]

MUL AX, BX
MOV [RETURN0], AX

MOV AX, [AN01]
MOV BX, [BN00]
MUL AX, BX
MOV [TEMP2], AX
MOV AX, [AN00]
MOV BX, [BN01]
MUL BX, AX
MOV AX, [TEMP2]
ADD AX, BX
MOV [RETURN1], AX

MOV AX, [AN01]
MOV BX, [BN01]
MUL AX, BX
MOV [RETURN2], AX

// HOW TO CONVERT THIS RESULT INTO DECIMAL

RET
// hexmulitply END



// FUNCTION START
anbngenerator:

MOV [TEMP1], BX

CALL splitvalue

MOV [AN00], AX
MOV [AN01], BX

MOV AX, [TEMP1]

CALL splitvalue

MOV [BN00], AX
MOV [BN01], BX

RET
// anbngenerator END



// FUNCTION START
hexadd:

CALL anbngenerator

// This works becuase of the state anbngenerator leaves.
MOV AX, [AN01]
ADD AX, BX

CALL splitvalue

MOV [TEMP1], BX

MOV BX, [AN00]
ADD AX, BX
MOV BX, [BN00]
ADD AX, BX

MOV BX, [TEMP1]

RET
// hexadd END



// FUNCTION START
splitvalue:

MOV BX, AX

//BX
MOV [AXCOPY], AX
MOV AX, 0x00FF
AND BX, AX
MOV AX, [AXCOPY]

//AX
SUB AX, BX
QSR AX
QSR AX

// WASP SHR BUG FIX START
MOV [BXCOPY], BX
MOV BX, 0x00FF
AND AX, BX
MOV BX, [BXCOPY]
// WASP SHR BUG FIX END

RET
// Result, AX contains 0x**00 >> 8, BX contains 0x00** 
// splitvalue END



// FUNCTION START
splitlast:

MOV BX, 0xFFF0
MOV [AXCOPY], AX
AND AX, BX
MOV BX, [AXCOPY]
SUB BX, AX
QSR AX

// WASP SHR BUG FIX START
MOV [BXCOPY], BX
MOV BX, 0x0FFF
AND AX, BX
MOV BX, [BXCOPY]
// WASP SHR BUG FIX END

RET
// Result, AX: 0x***0 > 4, BX 0x000*
// splitlast END



// variables

VALUEA: DC.W 0x1FFF
VALUEB: DC.W 0x1FFE

OPERATOR: DC.W 0x1FFD

RETURN0: DC.W 0x1FFC
RETURN1: DC.W 0x1FFB
RETURN2: DC.W 0x1FFA

ARG3: DC.W 0x1FF9
ARG4: DC.W 0x1FF8
ARG5: DC.W 0x1FF7

DIGIT1: DC.W 0x1FF6
DIGIT2: DC.W 0x1FF5
DIGIT3: DC.W 0x1FF4
DIGIT4: DC.W 0x1FF3
DIGIT5: DC.W 0x1FF2
DIGIT6: DC.W 0x1FF1
DIGIT7: DC.W 0x1FF0
DIGIT8: DC.W 0x1FEF
DIGIT9: DC.W 0x1FEE
DIGIT10: DC.W 0x1FED

FUNCPTR: DC.W 0x1FEC

TEMP1: DC.W 0x1FEB
TEMP2: DC.W 0x1FEA
TEMP3: DC.W 0x1FE9

AXCOPY: DC.W 0x1FE8
BXCOPY: DC.W 0x1FE7

AN00: DC.W 0x1FE6
AN01: DC.W 0x1FE5
BN00: DC.W 0x1FE4
BN01: DC.W 0x1FE3

TEMP4: DC.W 0x1FE2