MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
MOV AX, 0xFFFF
MOV BX, 0x0
CALL AddAXToFragmentedNumberOffsettPointerBX
CALL MulFragmentedNumberByTen
CALL DivFragmentedNumberByTenRemInAX
HALT



AddAXToFragmentedNumberOffsettPointerBX:

PUSH AX
PUSH BX
CALL ResetSignificandPointerToStart
MOV AX, [fragmentedSignificandPointer]
POP BX 
ADD AX, BX
MOV [fragmentedSignificandPointer], AX
POP AX

AddAXToFragmentedNumberLoop:

CALL SplitAX

PUSH AX

MOV AX, [fragmentedSignificandPointer]
MOV AX, [AX]
ADD AX, BX

CALL SplitAX

PUSH AX

MOV AX, [fragmentedSignificandPointer]
MOV [AX], BX

POP AX
POP BX

ADD AX, BX
CALL IncrementPointerBX

CMP AX, 0x0
JNE AddAXToFragmentedNumberLoop

MOV AX, [fragmentedSignificandPointer]
MOV [significandEndVariable], AX

RET



MulFragmentedNumberByTen:

CALL ResetSignificandPointerToStart
MOV BX, 0x0
PUSH BX

MulFragmentedNumberByTenLoop:

MOV AX, [fragmentedSignificandPointer]
MOV AX, [AX]
MUL AX, 0xA
POP BX
ADD AX, BX

CALL SplitAX
PUSH AX

MOV AX, [fragmentedSignificandPointer]
MOV [AX], BX

CALL IncrementPointerBX

MOV AX, [fragmentedSignificandPointer]
MOV BX, [significandEndVariable]
INC BX
CMP AX, BX
JL MulFragmentedNumberByTenLoop
MOV [significandEndVariable], AX
POP AX
RET



DivFragmentedNumberByTenRemInAX:

CALL ResetSignificandPointerToEnd
MOV BX, 0x0
PUSH BX

DivFragmentedNumberByTenRemInAXLoop:

MOV AX, [fragmentedSignificandPointer]
MOV AX, [AX]

POP BX
MUL BX, 0x10
MUL BX, 0x10
ADD AX, BX
MOV BX, AX

DIV AX, 0xA
MOD BX, 0xA
PUSH BX

MOV BX, [fragmentedSignificandPointer]
MOV [BX], AX

CALL DecrementPointerBX

MOV AX, [fragmentedSignificandPointer]
MOV BX, [significandStartConstant]
CMP AX, BX
JGE DivFragmentedNumberByTenRemInAXLoop

POP AX
RET



ResetSignificandPointerToStart:
MOV BX, [significandStartConstant]
MOV [fragmentedSignificandPointer], BX
RET



ResetSignificandPointerToEnd:
MOV BX, [significandEndVariable]
MOV [fragmentedSignificandPointer], BX
RET



IncrementPointerBX:
MOV BX, [fragmentedSignificandPointer]
INC BX
MOV [fragmentedSignificandPointer], BX
RET



DecrementPointerBX:
MOV BX, [fragmentedSignificandPointer]
DEC BX
MOV [fragmentedSignificandPointer], BX
RET



SplitAX:

MOV BX, AX

//BX
PUSH AX
MOV AX, 0x00FF
AND BX, AX
POP AX

//AX
SUB AX, BX
QSR AX
QSR AX

// WASP SHR BUG FIX START
PUSH BX
MOV BX, 0x00FF
AND AX, BX
POP BX
// WASP SHR BUG FIX END
// Result, AX contains 0x**00 >> 8, BX contains 0x00** 
RET

Return:
RET



fragmentedSignificandPointer: DC.W 0x0
significandStartConstant: DC.W 0x1000
significandEndVariable: DC.W 0x0
exponentOfFragmentedTwosCompliment: DC.W 0x0
signOfFragmented: DC.W 0x0